---
import type { NavigationItem } from "../constants/site";
import { NAVIGATION } from "../constants/site";

const pathname = new URL(Astro.request.url).pathname;

const isActive = (path: string) => {
  if (path === "/") return pathname === "/";
  return pathname.startsWith(path);
};
---

<nav aria-label="Main navigation">
  <div class="nav-links" role="menubar">
    {
      NAVIGATION.main.map(({ name, path }: NavigationItem, index: number) => (
        <a
          href={path}
          class={isActive(path) ? "active" : ""}
          role="menuitem"
          aria-current={isActive(path) ? "page" : undefined}
          tabindex={index === 0 ? 0 : -1}
          data-nav-item
        >
          <span class="nav-text">{name}</span>
          {isActive(path) && <span class="sr-only">(current page)</span>}
        </a>
      ))
    }
  </div>
</nav>

<script>
  const navItems = document.querySelectorAll("[data-nav-item]");

  navItems.forEach((item) => {
    item.addEventListener("keydown", (event: Event) => {
      if (!(event instanceof KeyboardEvent)) return;

      const items = Array.from(navItems);
      const index = items.indexOf(event.target as Element);
      let nextIndex: number;

      switch (event.key) {
        case "ArrowRight":
        case "ArrowDown":
          event.preventDefault();
          nextIndex = index + 1 >= items.length ? 0 : index + 1;
          (items[nextIndex] as HTMLElement).focus();
          break;
        case "ArrowLeft":
        case "ArrowUp":
          event.preventDefault();
          nextIndex = index - 1 < 0 ? items.length - 1 : index - 1;
          (items[nextIndex] as HTMLElement).focus();
          break;
        case "Home":
          event.preventDefault();
          (items[0] as HTMLElement).focus();
          break;
        case "End":
          event.preventDefault();
          (items[items.length - 1] as HTMLElement).focus();
          break;
      }
    });
  });
</script>

<style>
  nav {
    display: flex;
    align-items: center;
    position: sticky;
    top: 0;
    background: var(--background);
    z-index: 10;
    padding: 1rem 0;
  }

  .nav-links {
    display: flex;
    gap: 1.5rem;
    list-style: none;
    margin: 0;
    padding: 0;
  }

  a {
    color: var(--text-muted);
    text-decoration: none;
    font-size: var(--text-sm);
    transition: color var(--transition-base);
    position: relative;
    padding: 0.25rem 0;
    outline: 2px solid transparent;
    outline-offset: 4px;
  }

  a.active::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    height: 1px;
    background: red !important;
    width: 100% !important;
  }

  a:hover::after {
    width: 100%;
  }

  a:focus-visible {
    outline-color: var(--text-color);
    outline-offset: 8px;
  }

  a.active {
    color: var(--text-color);
  }

  a.active::after {
    width: 100%;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  @media (max-width: 768px) {
    .nav-links {
      gap: 1rem;
    }

    a {
      padding: 0.5rem 0;
    }
  }

  @media (hover: none) {
    a:hover {
      color: var(--text-muted);
    }
  }
</style>
